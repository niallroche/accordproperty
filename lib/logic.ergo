/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//namespace org.accordproject.empty
namespace com.mishcon.residential.shortformsales

import org.accordproject.cicero.runtime.*
import org.accordproject.time.*
import org.accordproject.money.MonetaryAmount
//import com.mishcon.residential.shortformsales.*

contract ResidentialSales over EmptyContract state PropertyPurchaseState {

  /* define function calculatePenalty() : Double {
    //return contract.PRICE*contract.LAW_SOCIETY_RATE;
    return 0.0;
  }

  define function calculateInterest() : Double {
    return contract.PRICE*contract.LAW_SOCIETY_RATE;
  } */

  //TODO consider if we need a clause/function to check if there is a breech, and if so how much, but not to trigger a breach

  clause latedeliveryandpenalty(request : SaleCompletionRequest) : SaleCompletionResponse emits PaymentObligation {
    let agreed = request.agreedDepositDate;
    let received = request.depositReceivedAt;

    //check time, if not specified then the 2pm dealine applies, but it may be earlier due to an agreed chain time
    //TODO check what happens if agree to be received after 2pm, such as COB or before midnight


    //deposit may not have been received yet
    /*match received
      let received = request.depositReceivedAt;
    else
      let received = request.depositReceivedAt;*/
      //if deposit has not been received then need to check if the current time is within the agreed period, if not then indicate that 
    
    /*match request.depositReceivedAt
    with let? received then let received = request.depositReceivedAt
    else let received = now */


/*
If the money due on completion is received after 2.00pm, completion is to be treated, for
the purposes only of conditions 6.3 and 7.2, as taking place on the next working day as a
result of the buyer's default
*/
let diff = diffDurationAs(received,agreed,"days"); //time??
//let diff = 1;

//log "difference in days" diff

//5.3
let totalRepairCosts = 0.0;

/*7.2 Late completion

7.2.2 Compensation is calculated at the contract rate on an amount equal to the purchase price,
less (where the buyer is the paying party) any deposit paid, for the period by which the
paying party's default exceeds that of the receiving party, or, if shorter, the period between
completion date and actual completion.*/
/*let totalLateCompensation =
      integerToDouble(diff) 
		  * request.contractRate/100.0 * contract.purchasePrice;*/

//let penaltyDuration :Duration = 

let diffRatio = divideDuration(diff,durationAs(contract.penaltyDuration,"days"));
    // Penalty formula
let penalty = diffRatio * request.contractRate/100.0 * contract.purchasePrice;

let totalLateCompensation = penalty;
/* Apportionments

104,750 = 1 * 4.75/100 * 100,000 / 365.??? leap year

could be buyer or seller, seller is on full amount, buyer

apportionment over a year 365 days
spread over 356 days then deividesd
seller owns until the end of the day
day after buyer pays

buyer must be granted access before completion to check property, possibly multiple times by agreement, 
if this was not allowed it could be a reason for compensation

compensation couldbe reasonable expenses related to non-vacation or issues moving in (due to damage???)
hotel expenses, moving and stroage fees etc. this needs to be paid less and per day compensation that is specified in the contract as an per day interest payment

buyerIsTenant
buyerHasOccupiedAsALicencee
propertyVacatedBySellerBeforeAgreedTime

propertyVacatedBySellerBeforeAgreedTime
isVacantPossession
wasAccessGranted
insurancePaymentOutstanding
insurancePaymentOutstandingAmount
seller owns the building until the end of the completion date
apportionmentDailyAmount (annualAmount/365)

6.3.5 provisionalApportionmentAmount
must notify parties
balance to be paid no more than 10 days, after that it incurrs interest at the standard rate

let diffRatio = divideDuration(diff,durationAs(contract.penaltyDuration,"days"));
    // Penalty formula
    let penalty = diffRatio * contract.penaltyPercentage/100.0 * request.goodsValue;
 
*/
let totalApportionments = 0.0;

/*6.4 Amount payable
The amount payable by the buyer on completion is the purchase price and the contents
price (less any deposit already paid to the seller or his agent) adjusted to take account of:
(a) apportionments made under condition 6.3
(b) any compensation to be paid or allowed
(c) any sum payable under condition 5.1.3*/

//6.1.3
// vacant possession 

let totalAmountPayable = 0.0;
let totalAmountPayable = totalAmountPayable + totalApportionments;
let totalAmountPayable = totalAmountPayable + totalLateCompensation;
let totalAmountPayable = totalAmountPayable + totalRepairCosts;

    //need conditions for deposit being received 
    //A on or ahead of agreed time
    //B after agreed
    //C if after agreed then need to consider if this invalidates the contract

    // Calculate the time difference between current date and agreed upon date
    //let diff = diffDurationAs(now(),agreed,"days").amount;

    // Penalty formula below from  latedelivery and penalty clause
    /*let penalty =
      (integerToDouble(diff) / integerToDouble(contract.penaltyDuration.amount))
		  * contract.penaltyPercentage/100.0 * request.goodsValue;
    // Penalty may be capped
    let capped = min([penalty, contract.capPercentage * request.goodsValue / 100.0]);
    // Return the response with the penalty and termination determination
    return SaleCompletionResponse{
      penalty: capped,
      buyerMayTerminate: diff > contract.termination.amount
    }*/
    //7.5.2
    /*
Any resulting balance is to be paid no more than ten working days later, and if not then
paid the balance is to bear interest at the contract
    */

   return SaleCompletionResponse{
      penalty: totalAmountPayable,
      daysLate:diff,
      sellerMayTerminate: false,
      buyerMayTerminate: false
    }
  } // end clause latedeliveryandpenalty

  clause LatePaymentNotification(request : LatePaymentNotificationRequest) : LatePaymentNotificationResponse {
    set state PropertyPurchaseState {
        status: "BuyerInDefault"
    };
    return LatePaymentNotificationResponse{
      sellerMayTerminate: true,//?
      buyerMayTerminate: false
    }
  }

  clause LatePayment(request : LateCompletionRequest) : LateCompletionResponse emits PaymentObligation {
    set state PropertyPurchaseState {
        status: "BuyerInDefault",
        daily_penalty: contract.PRICE*contract.LAW_SOCIETY_RATE,
        total_penalty: contract.LAW_SOCIETY_RATE//law society amount
    };
    let dfdf = 0;
    return LatePaymentResponse{
      penalty: totalAmountPayable,
      daysLate:diff,
      sellerMayTerminate: true,//?
      buyerMayTerminate: false
    }
  }

 clause SellerNotVacatedNotification(request : SellerNotVacatedNotificationRequest) : SellerNotVacatedNotificationResponse {
    set state PropertyPurchaseState {
        status: "SellerInDefault"
    };
    return SellerNotVacatedNotificationResponse{
      sellerMayTerminate: false,
      buyerMayTerminate: true//?
    }
  }

  clause NoticeToComplete(request : NoticeToCompleteRequest) : NoticeToCompleteResponse {
    set state PropertyPurchaseState {
        noticeGivenBy:request.issuer,
        status: "NoticeToComplete",
        completion_date:request.completion_date
    };
    return NoticeToCompleteResponse{
      sellerMayTerminate: false,
      buyerMayTerminate: true//?
    }
  }

  clause SellerRecinds(request : SellerRecindsRequest) : SellerRecindsResponse {
    set state PropertyPurchaseState {
        status: "SellerRecinds",
        total_penalty: calculateInterest()
    };

    return SellerRecindsResponse{
      total_penalty:0.0
    }
  }
} // end contract