/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

 /**
  * this contract represents elements of the Standard Conditions of Sale (5th edition) from  the UK Law Society governing rules around house purchase in the UK
  * see https://www.lawsociety.org.uk/support-services/documents/standard-conditions-of-sale-5th-edition/ for full details
  */

namespace org.accordproject.realestate.residential.uk.shortformsales

import org.accordproject.cicero.runtime.*
import org.accordproject.time.*
import org.accordproject.money.MonetaryAmount

import org.accordproject.realestate.residential.uk.utils.*
import org.accordproject.dates.utils.uk.*

/**
 * This is the main contract to manage the sale of a residential property in the England and Wales.
 * Given the complexities, this contract does not cover the entore agreement, or all of the nuances and edge cases, but is a starting point for automating many of the key clauses.
 * Given differences between leashold and freehold properties this may ultimately require two distinct contracts with common elements
 * however we are trying to keep it in one contraxct for the moment
 */

contract ResidentialSales over ResidentialSalesContract state PropertyPurchaseState {

  clause completeSale(request : SaleCompletionRequest) : SaleCompletionResponse emits PaymentObligation {
    let agreed = request.agreedDepositDate;
    let received = request.depositReceivedAt;

    //TODO check if deposit has not been received
    //deposit may not have been received yet
    /*match received
      let received = request.depositReceivedAt;
    else
      let received = request.depositReceivedAt;*/
      //if deposit has not been received then need to check if the current time is within the agreed period, if not then indicate that 
    
    /*match request.depositReceivedAt
    with let? received then let received = request.depositReceivedAt
    else let received = now */

  //need to check if there is a late penalty to apply
  /*
    If the money due on completion is received after 2.00pm, completion is to be treated, for
    the purposes only of conditions 6.3 and 7.2, as taking place on the next working day as a
    result of the buyer's default
  */
  let useDefaultCutoffTime = true; //default to 2pm cutoff for the moment
  let isPaymentLate = determineIfLatePaymentApplies(useDefaultCutoffTime, contract.completionDate, request.paymentDate);
  enforce isPaymentLate
  //else throw failure("Cannot exercise late delivery when cutoff time was before actual time");
  else throw ErgoErrorResponse{ message : "Cannot complete as there was a late delivery of payment" };

  let daysLate = 0;
  let totalLateCompensation = 0.0;

  /*if isPaymentlate 
  then 
  let purchasePriceOutstanding = contract.purchasePrice - contract.depositAmount.doubleValue;
  let daysLate = calculatePenaltyDuration(useDefaultCutoffTime, contract.completionDate, request.paymentDate);
  let totalLateCompensation = calculateInterest(purchasePriceOutstanding, daysLate, contract.contractRate);*/

  //TODO consider if we need a clause/function to check if there is a breach, and if so how much, but not to trigger a breach
  //need to determine how many days buyer and seller are in breach as the greater has control
  //if isPaymentLate  then
  //let daysLate = calculatePenaltyDuration(useDefaultCutoffTime, contract.completionDate, request.paymentDate);
  //let diff = 1;

  //log "difference in days" diff

  //5.3
  let totalRepairCosts = 0.0;

  /*7.2 Late completion

  7.2.2 Compensation is calculated at the contract rate on an amount equal to the purchase price,
  less (where the buyer is the paying party) any deposit paid, for the period by which the
  paying party's default exceeds that of the receiving party, or, if shorter, the period between
  completion date and actual completion.*/

  /* Apportionments

  104,750 = 1 * 4.75/100 * 100,000 / 365.??? leap year

  could be buyer or seller, seller is on full amount, buyer

  apportionment over a year 365 days
  spread over 356 days then deividesd
  seller owns until the end of the day
  day after buyer pays

  buyer must be granted access before completion to check property, possibly multiple times by agreement, 
  if this was not allowed it could be a reason for compensation

  compensation could be reasonable expenses related to non-vacation or issues moving in (due to damage???)
  hotel expenses, moving and stroage fees etc. this needs to be paid less and per day compensation that is specified in the contract as an per day interest payment

  buyerIsTenant
  buyerHasOccupiedAsALicencee
  propertyVacatedBySellerBeforeAgreedTime

  propertyVacatedBySellerBeforeAgreedTime
  isVacantPossession
  wasAccessGranted
  insurancePaymentOutstanding
  insurancePaymentOutstandingAmount
  seller owns the building until the end of the completion date
  apportionmentDailyAmount (annualAmount/365)

  6.3.5 provisionalApportionmentAmount
  must notify parties
  balance to be paid no more than 10 days, after that it incurrs interest at the standard rate

  let diffRatio = divideDuration(diff,durationAs(contract.penaltyDuration,"days"));
      // Penalty formula
      let penalty = diffRatio * contract.penaltyPercentage/100.0 * request.goodsValue;
  
  */
  let totalApportionments = 0.0;

  /*6.4 Amount payable
  The amount payable by the buyer on completion is the purchase price and the contents
  price (less any deposit already paid to the seller or his agent) adjusted to take account of:
  (a) apportionments made under condition 6.3
  (b) any compensation to be paid or allowed
  (c) any sum payable under condition 5.1.3*/

  //6.1.3
  // vacant possession 

  let totalAmountPayable = 0.0;
  let totalAmountPayable = totalAmountPayable + totalApportionments;
  let totalAmountPayable = totalAmountPayable + totalLateCompensation;
  let totalAmountPayable = totalAmountPayable + totalRepairCosts;

  //need conditions for deposit being received 
  //A on or ahead of agreed time
  //B after agreed
  //C if after agreed then need to consider if this invalidates the contract

  
  //7.5.2
  /*
  Any resulting balance is to be paid no more than ten working days later, and if not then
  paid the balance is to bear interest at the contract
  */

   return SaleCompletionResponse {
      penalty: totalAmountPayable,
      caseRef: request.caseRef,
      daysLate: daysLate,
      sellerMayTerminate: false,
      buyerMayTerminate: false
    }
  } // end clause latedeliveryandpenalty

 /**
  * If the buyer is late with their payment then calculate the late penalty amount as per the calculation specified in 7.2.2
  * note that there are conditions where this may not apply, such as if the Buyer is also in some type of default, 
  * this function, however, just does the basic late calculation according to the contract based on the law society rate passed into the function.
  * Due to interest rate fluctuations, this interest rate cannot be a constant.
  * Typically it is set at the outset of the contract, in this case is defined at a contract level, but 
  * Due to potential changes in interest rates between contract creation and calculation of any penalty this could vary
  * potentially some kind or Oracle service could be useful here, or lookup via an API, but for the moment this is sent as an input
  */
  clause LatePaymentNotification(request : LatePaymentNotificationRequest) : LatePaymentNotificationResponse {
    set state PropertyPurchaseState {
        status: "BuyerInDefault",
        caseRef: state.caseRef,
        buyerDefaultStatus: state.buyerDefaultStatus,
        sellerDefaultStatus: state.sellerDefaultStatus,
        apportionmentsTotal: state.apportionmentsTotal,
        apportionmentsPaid: state.apportionmentsPaid,
        balanceRemaining: state.balanceRemaining,
        totalPenaltyAmount: state.totalPenaltyAmount,
        totalPenaltyDays: state.totalPenaltyDays,
        totalCompensationPaidToBuyer: state.totalCompensationPaidToBuyer,
        totalCompensationPaidToSeller: state.totalCompensationPaidToSeller,
        totalDefaultDaysBuyer: state.totalDefaultDaysBuyer,
        totalDefaultDaySeller: state.totalDefaultDaySeller,
        completionDate: state.completionDate
    };

    return LatePaymentNotificationResponse{
      sellerMayTerminate: true,//?
      buyerMayTerminate: false
    }
  }

  clause LatePayment(request : LateCompletionRequest) : LateCompletionResponse emits PaymentObligation {
    /*according to definition 1.1.1(e) of the Standard conditions of sale (fifth edition), The Law Society interest rate is:
     * 4 percent above Barclays Bank base rate, which is currently 0.75 per cent.
     * The Law Society interest rate is 4 per cent above Barclays Bank base rate, which is currently 0.75 per cent. 
     * Rates are as at close of business on the day indicated.
     * The current Law Society interest rate is 4.75 per cent (since 2 August 2018)
    */

    let useDefaultCutoffTime = true; //default to 2pm cutoff for the moment
    let isPaymentlate = determineIfLatePaymentApplies(useDefaultCutoffTime, contract.completionDate, request.paymentDate);
    //check if the actual date is late
    enforce isPaymentlate
    //else throw failure("Cannot exercise late delivery when cutoff time was before actual time");
    else throw ErgoErrorResponse{ message : "Cannot exercise late delivery when cutoff time was before actual time" };

    let purchasePriceOutstanding = contract.purchasePrice - contract.depositAmount.doubleValue;
    let daysLate = calculatePenaltyDuration(useDefaultCutoffTime, contract.completionDate, request.paymentDate);
    let totalLateCompensation = calculateInterest(purchasePriceOutstanding, daysLate, contract.contractRate);
  
    //let interestRate = request.lawSocietyInterestRate; use contract rate although request rate may be used in future
    let interestRate = contract.contractRate;

    //let totalAmountPayable =  MonetaryAmount{doubleValue: totalLateCompensation, currencyCode: "GBP"};//may need to deduct through any breach
    let lawSocietyInterestRateApplied = interestRate;
    
    return LateCompletionResponse{
      //penalty: MonetaryAmount{doubleValue: totalLateCompensation, currencyCode: "GBP"},
      penalty: totalLateCompensation.doubleValue,
      daysLate:daysLate,
      sellerMayTerminate: true,//?
      lawSocietyInterestRateApplied: lawSocietyInterestRateApplied,
      buyerMayTerminate: false
    }
  }

 clause SellerNotVacatedNotification(request : SellerNotVacatedNotificationRequest) : SellerNotVacatedNotificationResponse {
    /*set state PropertyPurchaseState {
        status: "SellerInDefault"
    };*/
    return SellerNotVacatedNotificationResponse{
      //sellerMayTerminate: false,
      totalPenalty:0.0
      //buyerMayTerminate: true//?
    }
  }

  clause NoticeToComplete(request : NoticeToCompleteRequest) : NoticeToCompleteResponse {
    /*set state PropertyPurchaseState {
        noticeGivenBy:request.issuer,
        status: "NoticeToComplete",
        completion_date:request.completion_date
    };*/
    return NoticeToCompleteResponse{
      sellerMayTerminate: false,
      buyerMayTerminate: true//?
    }
  }

  clause SellerRecinds(request : SellerRecindsRequest) : SellerRecindsResponse {
    /*set state PropertyPurchaseState {
        status: "SellerRecinds",
        total_penalty: calculateInterest(contract.PRICE, contract.LAW_SOCIETY_RATE)
    };*/

    return SellerRecindsResponse{
      totalPenalty:0.0
    }
  }
} // end contract